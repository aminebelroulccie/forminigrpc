// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/notes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoteServiceClient is the client API for NoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteServiceClient interface {
	CreateNotesUnary(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (*CreateNoteRes, error)
	CreateNotesClientStream(ctx context.Context, opts ...grpc.CallOption) (NoteService_CreateNotesClientStreamClient, error)
	CreateNotesServerStream(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (NoteService_CreateNotesServerStreamClient, error)
	CreateNotesBdirectional(ctx context.Context, opts ...grpc.CallOption) (NoteService_CreateNotesBdirectionalClient, error)
}

type noteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteServiceClient(cc grpc.ClientConnInterface) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) CreateNotesUnary(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (*CreateNoteRes, error) {
	out := new(CreateNoteRes)
	err := c.cc.Invoke(ctx, "/NoteService/CreateNotesUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) CreateNotesClientStream(ctx context.Context, opts ...grpc.CallOption) (NoteService_CreateNotesClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoteService_ServiceDesc.Streams[0], "/NoteService/CreateNotesClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &noteServiceCreateNotesClientStreamClient{stream}
	return x, nil
}

type NoteService_CreateNotesClientStreamClient interface {
	Send(*CreateNote) error
	CloseAndRecv() (*CreateNoteRes, error)
	grpc.ClientStream
}

type noteServiceCreateNotesClientStreamClient struct {
	grpc.ClientStream
}

func (x *noteServiceCreateNotesClientStreamClient) Send(m *CreateNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *noteServiceCreateNotesClientStreamClient) CloseAndRecv() (*CreateNoteRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateNoteRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noteServiceClient) CreateNotesServerStream(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (NoteService_CreateNotesServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoteService_ServiceDesc.Streams[1], "/NoteService/CreateNotesServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &noteServiceCreateNotesServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NoteService_CreateNotesServerStreamClient interface {
	Recv() (*CreateNoteRes, error)
	grpc.ClientStream
}

type noteServiceCreateNotesServerStreamClient struct {
	grpc.ClientStream
}

func (x *noteServiceCreateNotesServerStreamClient) Recv() (*CreateNoteRes, error) {
	m := new(CreateNoteRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noteServiceClient) CreateNotesBdirectional(ctx context.Context, opts ...grpc.CallOption) (NoteService_CreateNotesBdirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoteService_ServiceDesc.Streams[2], "/NoteService/CreateNotesBdirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &noteServiceCreateNotesBdirectionalClient{stream}
	return x, nil
}

type NoteService_CreateNotesBdirectionalClient interface {
	Send(*CreateNote) error
	Recv() (*CreateNoteRes, error)
	grpc.ClientStream
}

type noteServiceCreateNotesBdirectionalClient struct {
	grpc.ClientStream
}

func (x *noteServiceCreateNotesBdirectionalClient) Send(m *CreateNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *noteServiceCreateNotesBdirectionalClient) Recv() (*CreateNoteRes, error) {
	m := new(CreateNoteRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoteServiceServer is the server API for NoteService service.
// All implementations must embed UnimplementedNoteServiceServer
// for forward compatibility
type NoteServiceServer interface {
	CreateNotesUnary(context.Context, *CreateNote) (*CreateNoteRes, error)
	CreateNotesClientStream(NoteService_CreateNotesClientStreamServer) error
	CreateNotesServerStream(*CreateNote, NoteService_CreateNotesServerStreamServer) error
	CreateNotesBdirectional(NoteService_CreateNotesBdirectionalServer) error
	mustEmbedUnimplementedNoteServiceServer()
}

// UnimplementedNoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoteServiceServer struct {
}

func (UnimplementedNoteServiceServer) CreateNotesUnary(context.Context, *CreateNote) (*CreateNoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotesUnary not implemented")
}
func (UnimplementedNoteServiceServer) CreateNotesClientStream(NoteService_CreateNotesClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateNotesClientStream not implemented")
}
func (UnimplementedNoteServiceServer) CreateNotesServerStream(*CreateNote, NoteService_CreateNotesServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateNotesServerStream not implemented")
}
func (UnimplementedNoteServiceServer) CreateNotesBdirectional(NoteService_CreateNotesBdirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateNotesBdirectional not implemented")
}
func (UnimplementedNoteServiceServer) mustEmbedUnimplementedNoteServiceServer() {}

// UnsafeNoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServiceServer will
// result in compilation errors.
type UnsafeNoteServiceServer interface {
	mustEmbedUnimplementedNoteServiceServer()
}

func RegisterNoteServiceServer(s grpc.ServiceRegistrar, srv NoteServiceServer) {
	s.RegisterService(&NoteService_ServiceDesc, srv)
}

func _NoteService_CreateNotesUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).CreateNotesUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoteService/CreateNotesUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).CreateNotesUnary(ctx, req.(*CreateNote))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_CreateNotesClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NoteServiceServer).CreateNotesClientStream(&noteServiceCreateNotesClientStreamServer{stream})
}

type NoteService_CreateNotesClientStreamServer interface {
	SendAndClose(*CreateNoteRes) error
	Recv() (*CreateNote, error)
	grpc.ServerStream
}

type noteServiceCreateNotesClientStreamServer struct {
	grpc.ServerStream
}

func (x *noteServiceCreateNotesClientStreamServer) SendAndClose(m *CreateNoteRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *noteServiceCreateNotesClientStreamServer) Recv() (*CreateNote, error) {
	m := new(CreateNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NoteService_CreateNotesServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateNote)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoteServiceServer).CreateNotesServerStream(m, &noteServiceCreateNotesServerStreamServer{stream})
}

type NoteService_CreateNotesServerStreamServer interface {
	Send(*CreateNoteRes) error
	grpc.ServerStream
}

type noteServiceCreateNotesServerStreamServer struct {
	grpc.ServerStream
}

func (x *noteServiceCreateNotesServerStreamServer) Send(m *CreateNoteRes) error {
	return x.ServerStream.SendMsg(m)
}

func _NoteService_CreateNotesBdirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NoteServiceServer).CreateNotesBdirectional(&noteServiceCreateNotesBdirectionalServer{stream})
}

type NoteService_CreateNotesBdirectionalServer interface {
	Send(*CreateNoteRes) error
	Recv() (*CreateNote, error)
	grpc.ServerStream
}

type noteServiceCreateNotesBdirectionalServer struct {
	grpc.ServerStream
}

func (x *noteServiceCreateNotesBdirectionalServer) Send(m *CreateNoteRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *noteServiceCreateNotesBdirectionalServer) Recv() (*CreateNote, error) {
	m := new(CreateNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoteService_ServiceDesc is the grpc.ServiceDesc for NoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotesUnary",
			Handler:    _NoteService_CreateNotesUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateNotesClientStream",
			Handler:       _NoteService_CreateNotesClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateNotesServerStream",
			Handler:       _NoteService_CreateNotesServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateNotesBdirectional",
			Handler:       _NoteService_CreateNotesBdirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/notes.proto",
}

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	StudentUnary(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (*CreateNoteRes, error)
	StudentClientStream(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentClientStreamClient, error)
	StudentServerStream(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (StudentService_StudentServerStreamClient, error)
	StudentBdirectional(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentBdirectionalClient, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) StudentUnary(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (*CreateNoteRes, error) {
	out := new(CreateNoteRes)
	err := c.cc.Invoke(ctx, "/StudentService/StudentUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) StudentClientStream(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[0], "/StudentService/StudentClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceStudentClientStreamClient{stream}
	return x, nil
}

type StudentService_StudentClientStreamClient interface {
	Send(*CreateNote) error
	CloseAndRecv() (*CreateNoteRes, error)
	grpc.ClientStream
}

type studentServiceStudentClientStreamClient struct {
	grpc.ClientStream
}

func (x *studentServiceStudentClientStreamClient) Send(m *CreateNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceStudentClientStreamClient) CloseAndRecv() (*CreateNoteRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateNoteRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) StudentServerStream(ctx context.Context, in *CreateNote, opts ...grpc.CallOption) (StudentService_StudentServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[1], "/StudentService/StudentServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceStudentServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentService_StudentServerStreamClient interface {
	Recv() (*CreateNoteRes, error)
	grpc.ClientStream
}

type studentServiceStudentServerStreamClient struct {
	grpc.ClientStream
}

func (x *studentServiceStudentServerStreamClient) Recv() (*CreateNoteRes, error) {
	m := new(CreateNoteRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) StudentBdirectional(ctx context.Context, opts ...grpc.CallOption) (StudentService_StudentBdirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[2], "/StudentService/StudentBdirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceStudentBdirectionalClient{stream}
	return x, nil
}

type StudentService_StudentBdirectionalClient interface {
	Send(*CreateNote) error
	Recv() (*CreateNoteRes, error)
	grpc.ClientStream
}

type studentServiceStudentBdirectionalClient struct {
	grpc.ClientStream
}

func (x *studentServiceStudentBdirectionalClient) Send(m *CreateNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceStudentBdirectionalClient) Recv() (*CreateNoteRes, error) {
	m := new(CreateNoteRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations must embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	StudentUnary(context.Context, *CreateNote) (*CreateNoteRes, error)
	StudentClientStream(StudentService_StudentClientStreamServer) error
	StudentServerStream(*CreateNote, StudentService_StudentServerStreamServer) error
	StudentBdirectional(StudentService_StudentBdirectionalServer) error
	mustEmbedUnimplementedStudentServiceServer()
}

// UnimplementedStudentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) StudentUnary(context.Context, *CreateNote) (*CreateNoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentUnary not implemented")
}
func (UnimplementedStudentServiceServer) StudentClientStream(StudentService_StudentClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StudentClientStream not implemented")
}
func (UnimplementedStudentServiceServer) StudentServerStream(*CreateNote, StudentService_StudentServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StudentServerStream not implemented")
}
func (UnimplementedStudentServiceServer) StudentBdirectional(StudentService_StudentBdirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method StudentBdirectional not implemented")
}
func (UnimplementedStudentServiceServer) mustEmbedUnimplementedStudentServiceServer() {}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_StudentUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).StudentUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StudentService/StudentUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).StudentUnary(ctx, req.(*CreateNote))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_StudentClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).StudentClientStream(&studentServiceStudentClientStreamServer{stream})
}

type StudentService_StudentClientStreamServer interface {
	SendAndClose(*CreateNoteRes) error
	Recv() (*CreateNote, error)
	grpc.ServerStream
}

type studentServiceStudentClientStreamServer struct {
	grpc.ServerStream
}

func (x *studentServiceStudentClientStreamServer) SendAndClose(m *CreateNoteRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceStudentClientStreamServer) Recv() (*CreateNote, error) {
	m := new(CreateNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudentService_StudentServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateNote)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentServiceServer).StudentServerStream(m, &studentServiceStudentServerStreamServer{stream})
}

type StudentService_StudentServerStreamServer interface {
	Send(*CreateNoteRes) error
	grpc.ServerStream
}

type studentServiceStudentServerStreamServer struct {
	grpc.ServerStream
}

func (x *studentServiceStudentServerStreamServer) Send(m *CreateNoteRes) error {
	return x.ServerStream.SendMsg(m)
}

func _StudentService_StudentBdirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).StudentBdirectional(&studentServiceStudentBdirectionalServer{stream})
}

type StudentService_StudentBdirectionalServer interface {
	Send(*CreateNoteRes) error
	Recv() (*CreateNote, error)
	grpc.ServerStream
}

type studentServiceStudentBdirectionalServer struct {
	grpc.ServerStream
}

func (x *studentServiceStudentBdirectionalServer) Send(m *CreateNoteRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceStudentBdirectionalServer) Recv() (*CreateNote, error) {
	m := new(CreateNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StudentUnary",
			Handler:    _StudentService_StudentUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StudentClientStream",
			Handler:       _StudentService_StudentClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StudentServerStream",
			Handler:       _StudentService_StudentServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StudentBdirectional",
			Handler:       _StudentService_StudentBdirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/notes.proto",
}
